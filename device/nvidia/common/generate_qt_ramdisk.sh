#!/bin/bash
#
# Copyright (c) 2012-2017 NVIDIA Corporation.  All rights reserved.
#
# NVIDIA Corporation and its licensors retain all intellectual property
# and proprietary rights in and to this software, related documentation
# and any modifications thereto.  Any use, reproduction, disclosure or
# distribution of this software and related documentation without an express
# license agreement from NVIDIA Corporation is strictly prohibited.
#
# Usage: generate_qt_ramdisk.sh [target_device]
#        generate_qt_ramdisk.sh --help
#
# Description: Generate a ramdisk image suitable for minimal booting of
#              systems without an root file system (such as early development
#              FPGAs systems).
#
# WARNING:  Loading up the ramdisk lots of extraneous files will severely
#           impact the boot time on FPGA systems. The files copied by this
#           script should be kept to the smallest subset possible.
#-------------------------------------------------------------------------------

# Give 'em help if they asked for it.
if [ "$1" == "--help" ]; then
    this_script=`basename $0`
    echo " "
    echo "Generate an Android ramdisk image capable of booting without"
    echo "an external file system."
    echo " "
    echo "Usage:"
    echo " "
    echo "  $this_script [target_device]"
    echo "  $this_script --help"
    echo " "
    echo "where:"
    echo " "
    echo "  target_device: t132 | t210 | grenada (default is grenada)"
    echo "  build_flavor: debug | release   (default is debug)"
    echo "  --help:       produces this description"
    echo " "
    exit 0
fi

# Sanity checks & default option processing
if [ "$TOP" == "" ]; then
    echo "ERROR: You must set environment variable TOP to the top of your nvrepo tree"
    exit 2
fi

if [ "$TOP" == "." ]; then
    top=`pwd`
else
    top=$TOP
fi

if [ "$1" == "" ]; then
    echo "Assuming target board is grenada"
    target_device="grenada"
else
    target_device=$1
fi

firmware=""
if [ "$target_device" == "t132" ]; then
    firmware="tegra13x"
fi

if [ "$target_device" == "t210" -o "$target_device" == "t210_int" ]; then
    firmware="tegra21x"
fi

if [ "$2" == "" ]; then
    echo "Assuming build flavor is debug"
    build_flavor="debug"
else
    build_flavor=$2
fi

# Host tools directory
android_host_bin=$top/out/host/linux-x86/bin

if [ -d "$OUT" ]; then
    echo "Using $OUT/qt_ramdisk_tmpdir to build new ramdisk contents"
    rm -rf $OUT/qt_ramdisk_tmpdir
    mkdir -p $OUT/qt_ramdisk_tmpdir
else
    echo "ERROR: Product output directory $OUT does not exist"
    exit 2
fi

# Extract the contents of standard ramdisk image generated by JackBuild
if [ -f "$OUT/ramdisk.img" ]; then
    echo "Unpacking archive $OUT/ramdisk.img"
    cd $OUT/qt_ramdisk_tmpdir
    gzip -dc < $OUT/ramdisk.img | cpio --extract
else
    echo "ERROR: No ramdisk.img found in $OUT"
    exit 2
fi

#echo "Adding files to $OUT/qt_ramdisk_tmpdir/sbin"
#mkdir -p $OUT/qt_ramdisk_tmpdir/sbin
#cd $OUT/qt_ramdisk_tmpdir/sbin
#cp $OUT/system/bin/nvtest .
#chmod +x ./nvtest

echo "Adding files to $OUT/qt_ramdisk_tmpdir/system"
mkdir -p $OUT/qt_ramdisk_tmpdir/system
cd $OUT/qt_ramdisk_tmpdir/system
cp $OUT/system/build.prop .

echo "Adding files to $OUT/qt_ramdisk_tmpdir/system/bin"
mkdir -p $OUT/qt_ramdisk_tmpdir/system/bin
cd $OUT/qt_ramdisk_tmpdir/system/bin
cp $OUT/system/bin/toolbox .
cp $OUT/system/bin/toybox .
#cp $OUT/system/bin/app_process .
#cp $OUT/system/bin/avp_load .

#cp $OUT/system/bin/debuggerd .
#cp $OUT/system/bin/gdbserver .
#cp $OUT/system/bin/ifconfig .
#cp $OUT/system/bin/iftop .
#cp $OUT/system/bin/keystore .
#cp $OUT/system/bin/keystore_cli .
cp $OUT/system/bin/linker64 .
cp $OUT/system/bin/logcat .
cp $OUT/system/bin/logwrapper .
#cp $OUT/system/bin/mediaserver .
#cp $OUT/system/bin/netstat .
#cp $OUT/system/bin/newfs_msdos .
#cp $OUT/system/bin/reboot .
#cp $OUT/system/bin/route .
#cp $OUT/system/bin/service .
#cp $OUT/system/bin/servicemanager .
cp $OUT/system/bin/sh .
#cp $OUT/system/bin/surfaceflinger .
# cp $OUT/symbols/system/bin/affinity .

cp -s toybox cat
cp -s toybox chmod
cp -s toybox chown
cp -s toybox cmp
cp -s toybox date
cp -s toolbox dd
cp -s toolbox df
cp -s toybox dmesg
cp -s toolbox getevent
cp -s toybox getprop
cp -s toybox xxd
cp -s toybox id
cp -s toybox insmod
cp -s toolbox ioctl
cp -s toybox kill
cp -s toybox ln
cp -s toolbox log
cp -s toybox ls
cp -s toybox lsmod
cp -s toybox mkdir
cp -s toybox mount
cp -s toybox mv
cp -s toybox inotifyd
cp -s toybox printenv
cp -s toolbox ps
cp -s toybox iorenice
cp -s toybox renice
cp -s toybox rm
cp -s toybox rmdir
cp -s toybox rmmod
cp -s toybox schedtop
cp -s toybox sendevent
cp -s toybox setconsole
cp -s toybox setprop
cp -s toybox sleep
cp -s toolbox start
cp -s toolbox stop
cp -s toybox sync
cp -s toybox top
cp -s toybox umount
cp -s toybox vmstat
# needed for SElinux
cp -s toybox setenforce
cp -s toybox restorecon
cp -s toybox chcon

if [ "$include_busybox" == "true" ]; then
    # Replace android sh with busybox
    if [ -d $top/busybox-android/ ]; then
        cp $top/busybox-android/busybox .
        for i in `qemu-arm $top/busybox-android/busybox --list`
        do
           rm -rf $i
           ln -sf busybox $i
        done
    fi
fi

# NVIDIA Test applications
cp $OUT/system/vendor/bin/nvtest .
cp $OUT/system/vendor/bin/tlk_daemon .

# NVIDIA Test scripts
cp $top/device/nvidia/common/dcc .
chmod +x ./dcc
cp $top/device/nvidia/common/hotplug .
chmod +x ./hotplug
cp $top/device/nvidia/common/cluster .
cp $top/device/nvidia/common/cluster_get.sh .
cp $top/device/nvidia/common/cluster_set.sh .
chmod +x ./cluster
chmod +x ./cluster_get.sh
chmod +x ./cluster_set.sh
cp $top/device/nvidia/common/mount_debugfs.sh .
chmod +x ./mount_debugfs.sh

#echo "Adding files to $OUT/qt_ramdisk_tmpdir/system/etc"
#mkdir -p $OUT/qt_ramdisk_tmpdir/system/etc
#cd $OUT/qt_ramdisk_tmpdir/system/etc
#cp $OUT/system/etc/apns-conf.xml .
#cp $OUT/system/etc/dbus.conf .
#cp $OUT/system/etc/hosts .
#cp $OUT/system/etc/init.goldfish.sh .

#echo "Adding files to $OUT/qt_ramdisk_tmpdir/system/etc/firmware"
#mkdir -p $OUT/qt_ramdisk_tmpdir/system/etc/firmware
#cd $OUT/qt_ramdisk_tmpdir/system/etc/firmware
#cp $OUT/system/etc/firmware/nvddk_audiofx_core.axf .
#cp $OUT/system/etc/firmware/nvddk_audiofx_transport.axf .
#cp $OUT/system/etc/firmware/nvmm_manager.axf .
#cp $OUT/system/etc/firmware/nvmm_audiomixer.axf .

#echo "Adding files to $OUT/qt_ramdisk_tmpdir/system/etc/security"
#mkdir -p $OUT/qt_ramdisk_tmpdir/system/etc
#cd $OUT/qt_ramdisk_tmpdir/system/etc/security/etc
#cp $OUT/system/etc/security/otacerts.zip .

echo "Adding files to $OUT/qt_ramdisk_tmpdir/system/lib64"
mkdir -p $OUT/qt_ramdisk_tmpdir/system/lib64
cd $OUT/qt_ramdisk_tmpdir/system/lib64
# Standard libraries
# cp $OUT/system/lib64/libc_malloc_debug_leak.so .
cp $OUT/system/lib64/libc.so .
cp $OUT/system/lib64/libcutils.so .
cp $OUT/system/lib64/libcrypto.so .
cp $OUT/system/lib64/libpcre.so .
cp $OUT/system/lib64/libdl.so .
cp $OUT/system/lib64/liblog.so .
cp $OUT/system/lib64/libm.so .
cp $OUT/system/lib64/libstdc++.so .
cp $OUT/system/lib64/libc++.so .
# cp $OUT/system/lib64/libthread_db.so .
cp $OUT/system/lib64/libutils.so .
# cp $OUT/system/lib64/libcorkscrew.so .
# libgccdemangle.so not built in M.
# cp $OUT/system/lib64/libgccdemangle.so .
cp $OUT/system/lib64/libz.so .
cp $OUT/system/lib64/libselinux.so .
cp $OUT/system/lib64/libsync.so .
cp $OUT/system/lib64/libsigchain.so .

# Android libraries
cp $OUT/system/lib64/libbinder.so .
cp $OUT/system/lib64/libhardware.so .
cp $OUT/system/lib64/libhardware_legacy.so .
#cp $OUT/system/lib64/libnetutils.so .
#cp $OUT/system/lib64/libpixelflinger.so .
#cp $OUT/system/lib64/libsurfaceflinger_client.so .
#cp $OUT/system/lib64/libui.so .
#cp $OUT/system/lib64/libwpa_client.so .
cp $OUT/system/lib64/libusbhost.so .

# NVIDIA libraries
#cp $OUT/system/vendor/lib64/libcgdrv.so .
#cp $OUT/system/vendor/lib64/libEGL.so .
#cp $OUT/system/vendor/lib64/libGLESv1_CM.so .
#cp $OUT/system/vendor/lib64/libGLESv2.so .
#cp $OUT/system/vendor/lib64/libnvddk_2d_v2.so .
#cp $OUT/system/vendor/lib64/libnvddk_aes_user.so .
#cp $OUT/system/vendor/lib64/libnvddk_audiofx.so .
#cp $OUT/system/vendor/lib64/libnvddk_audiofx_core.so .
#cp $OUT/system/vendor/lib64/libnvdispmgr_d.so .
#cp $OUT/system/vendor/lib64/libnvec.so .
#cp $OUT/system/vendor/lib64/libnvidia_display_jni.so .
#cp $OUT/system/vendor/lib64/libnvmm_audio.so .
#cp $OUT/system/vendor/lib64/libnvmm_contentpipe.so .
#cp $OUT/system/vendor/lib64/libnvmm_image.so .
#cp $OUT/system/vendor/lib64/libnvmm_manager.so .
#cp $OUT/system/vendor/lib64/libnvmm_misc.so .
#cp $OUT/system/vendor/lib64/libnvmm_parser.so .
#cp $OUT/system/vendor/lib64/libnvmm_service.so .
#cp $OUT/system/vendor/lib64/libnvmm.so .
#cp $OUT/system/vendor/lib64/libnvmm_tracklist.so .
#cp $OUT/system/vendor/lib64/libnvmm_utils.so .
#cp $OUT/system/vendor/lib64/libnvmm_videorenderer.so .
#cp $OUT/system/vendor/lib64/libnvmm_video.so .
#cp $OUT/system/vendor/lib64/libnvmm_vp6_video.so .
#cp $OUT/system/vendor/lib64/libnvmm_writer.so .
#cp $OUT/system/vendor/lib64/libnvodm_dtvtuner.so .
#cp $OUT/system/vendor/lib64/libnvodm_hdmi.so .
#cp $OUT/system/vendor/lib64/libnvodm_imager.so .
#cp $OUT/system/vendor/lib64/libnvodm_misc.so .
#cp $OUT/system/vendor/lib64/libnvodm_query.so .
#cp $OUT/system/vendor/lib64/libnvomxilclient.so .
#cp $OUT/system/vendor/lib64/libnvomx.so .
cp $OUT/system/vendor/lib64/libnvos.so .
cp $OUT/system/vendor/lib64/libnvrm_graphics.so .
cp $OUT/system/vendor/lib64/libnvrm.so .
#cp $OUT/system/vendor/lib64/libnvsm.so .
#cp $OUT/system/vendor/lib64/libnvwinsys.so .
#cp $OUT/system/vendor/lib64/libnvwsi.so .

# NVIDIA test libraries
cp $OUT/system/vendor/lib64/libnvapputil.so .
cp $OUT/system/vendor/lib64/libnvtestresults.so .

echo "Adding filess to $OUT/system/lib64/modules"
mkdir -p $OUT/qt_ramdisk_tmpdir/system/lib64/modules
pushd $OUT/qt_ramdisk_tmpdir/system/lib64/modules
popd

echo "Adding files to $OUT/qt_ramdisk_tmpdir/system/lib64/egl"
mkdir -p $OUT/qt_ramdisk_tmpdir/system/lib64/egl
cd $OUT/qt_ramdisk_tmpdir/system/lib64/egl
#cp $OUT/system/lib64/egl/libEGL_tegra.so .
#cp $OUT/system/lib64/egl/libGLESv1_CM_tegra.so .
#cp $OUT/system/lib64/egl/libGLESv2_tegra.so .

echo "Adding files to $OUT/qt_ramdisk_tmpdir/system/xbin"
mkdir -p $OUT/qt_ramdisk_tmpdir/system/xbin
cd $OUT/qt_ramdisk_tmpdir/system/xbin
#cp $OUT/system/xbin/scp .
#cp $OUT/system/xbin/showslab .
#cp $OUT/system/xbin/ssh .
cp $OUT/system/xbin/su .

echo "Adding files to $OUT/qt_ramdisk_tmpdir/system/etc/firmware"
mkdir -p $OUT/qt_ramdisk_tmpdir/system/etc/firmware
pushd $OUT/qt_ramdisk_tmpdir/system/etc/firmware
cp -r $OUT/system/etc/firmware/* .
popd

device_dir=$top/device/nvidia/platform/$target_device
shell_init_rc=$device_dir/init_no_root_device.rc
root_init_rc=$OUT/root/init.rc

if [ -f "$shell_init_rc" ]; then
    echo cp $shell_init_rc $OUT/qt_ramdisk_tmpdir/init.rc
    cp $shell_init_rc $OUT/qt_ramdisk_tmpdir/init.rc
    echo cp $root_init_rc $OUT/qt_ramdisk_tmpdir/init.base.rc
    cp $root_init_rc $OUT/qt_ramdisk_tmpdir/init.base.rc
fi

# Package up the new ramdisk image
if [ -d $android_host_bin ]; then
    echo "Packaging new ramdisk contents as $OUT/qt_ramdisk.img"
	$android_host_bin/mkbootfs $OUT/qt_ramdisk_tmpdir > $OUT/qt_ramdisk.img
else
    echo "ERROR: Host tools directory $android_host_bin does not exist"
    exit 2
fi

echo "Done"
exit 0
