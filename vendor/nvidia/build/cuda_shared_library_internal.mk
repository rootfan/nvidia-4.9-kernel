################################################################################
#
# Nvidia CUDA target shared library
#
################################################################################

################################################################################
# cuda_nvcc_setup.mk
#
# Input:  my_prefix
#         LOCAL_NVIDIA_NVCC_CFLAGS
#         LOCAL_NVIDIA_NVCC_LDFLAGS
#         LOCAL_*
#
# Output: my_nvcc          : NVIDIA Cuda Compiler binary location
#         my_nvcc_cflags   : Parameters for .cu to .o compilation
#         my_nvcc_ldflags  : Parameters for .o to library compilation
#
# Modify: LOCAL_EXPORT_C_INCLUDE_DIRS
################################################################################
include $(NVIDIA_BUILD_ROOT)/cuda_nvcc_setup.mk

################################################################################
# Using following variables from dynamic_binary.mk (incomplete list)
#
# my_cc:                    c/c++ compiler.
# my_cflags:                c flags generated by android build system.
# my_ldflags:               linker flags generated by android build system.
# my_c_includes:            include pathes generated by android build system.
# my_target_c_includes:     stl/compiler specific include pathes generated by android build system.
# my_target_global_ldflags: linker flags generated by android build system.
# my_32_64_bit_suffix:      32/64 bit suffix for current build target.
# intermediates:            output path for intermediate objects.
# import_includes:          file that contains all include paths of dependent libraries.
# ...
################################################################################

# WAR: nvcc does not support ccache, disable it for cuda static libraries
_SAVE_CXX_WRAPPER := $(CXX_WRAPPER)
CXX_WRAPPER :=
OVERRIDE_BUILT_MODULE_PATH := $($(LOCAL_2ND_ARCH_VAR_PREFIX)TARGET_OUT_INTERMEDIATE_LIBRARIES)
include $(BUILD_SYSTEM)/dynamic_binary.mk
CXX_WRAPPER := $(_SAVE_CXX_WRAPPER)

ifeq ($(LOCAL_IS_HOST_MODULE), true)
$(error cuda_nvcc_setup.mk supports target build only!)
endif

################################################################################
#
# CUDA Object Generation
#
################################################################################
cuda_sources := $(filter %.cu,$(LOCAL_SRC_FILES))
cuda_objects := $(addprefix $(intermediates)/,$(cuda_sources:.cu=.o))
cuda_objdeps := $(cuda_objects) $(cuda_depinfo)

ifneq ($(strip $(cuda_objects)),)
 include $(NVIDIA_BUILD_ROOT)/cuda_objects.mk
endif

################################################################################
#
# Linking
#
################################################################################

ifneq ($(strip $(cuda_objects)),)

#
# The following variable definitions are taken from
# $(BUILD_SYSTEM)/shared_library_internal.mk and
# might need to be changed accordingly over time.
#

# Define PRIVATE_ variables from global vars
my_target_global_ld_dirs := $($(LOCAL_2ND_ARCH_VAR_PREFIX)TARGET_GLOBAL_LD_DIRS)
my_target_libatomic := $($(LOCAL_2ND_ARCH_VAR_PREFIX)TARGET_LIBATOMIC)

ifeq ($(LOCAL_NO_LIBGCC),true)
 my_target_libgcc :=
else
 my_target_libgcc := $($(LOCAL_2ND_ARCH_VAR_PREFIX)TARGET_LIBGCC)
endif

ifeq ($(LOCAL_NO_CRT),true)
 my_target_crtbegin_so_o :=
 my_target_crtend_so_o :=
else
 my_target_crtbegin_so_o := $($(LOCAL_2ND_ARCH_VAR_PREFIX)TARGET_CRTBEGIN_SO_O)
 my_target_crtend_so_o := $($(LOCAL_2ND_ARCH_VAR_PREFIX)TARGET_CRTEND_SO_O)
endif

ifdef LOCAL_SDK_VERSION
 # Make sure the prebuilt NDK paths are put ahead of the TARGET_GLOBAL_LD_DIRS,
 # so we don't have race condition when the system libraries (such as libc, libstdc++) are also built in the tree.
 my_target_global_ld_dirs := \
     $(addprefix -L, $(patsubst %/,%,$(dir $(my_ndk_stl_shared_lib_fullpath))) \
     $(my_ndk_sysroot_lib)) \
     $(my_target_global_ld_dirs)
 my_target_global_ldflags := $(my_ndk_stl_shared_lib) $(my_target_global_ldflags)
 my_target_crtbegin_so_o := $(wildcard $(my_ndk_sysroot_lib)/crtbegin_so.o)
 my_target_crtend_so_o := $(wildcard $(my_ndk_sysroot_lib)/crtend_so.o)
endif

$(linked_module): PRIVATE_CC      := $(my_nvcc) -ccbin $(my_cxx)
$(linked_module): PRIVATE_LDFLAGS := $(my_ldflags) #$(my_nvcc_ldflags)

$(linked_module): PRIVATE_TARGET_GLOBAL_LD_DIRS := $(my_target_global_ld_dirs)
$(linked_module): PRIVATE_TARGET_GLOBAL_LDFLAGS := $(my_target_global_ldflags)
$(linked_module): PRIVATE_TARGET_LIBGCC         := $(my_target_libgcc)
$(linked_module): PRIVATE_TARGET_LIBATOMIC      := $(my_target_libatomic)
$(linked_module): PRIVATE_TARGET_CRTBEGIN_SO_O  := $(my_target_crtbegin_so_o)
$(linked_module): PRIVATE_TARGET_CRTEND_SO_O    := $(my_target_crtend_so_o)
$(linked_module): PRIVATE_ALL_OBJECTS           := $(cuda_objects)

$(linked_module): \
        $(cuda_objects) \
        $(all_libraries) \
        $(my_target_crtbegin_so_o) \
        $(my_target_crtend_so_o) \
        $(LOCAL_MODULE_MAKEFILE_DEP) \
        $(LOCAL_ADDITIONAL_DEPENDENCIES)
	@mkdir -p $(dir $@)
	@rm -f $@
	@echo "target CUDA SharedLib: $(PRIVATE_MODULE) ($@)"
	$(hide) $(PRIVATE_CXX) \
	    -nostdlib -Wl,-soname,$(notdir $@) \
	    -Wl,--gc-sections \
	    -Wl,-shared \
	    $(PRIVATE_TARGET_GLOBAL_LD_DIRS) \
	    $(PRIVATE_TARGET_CRTBEGIN_SO_O) \
	    $(PRIVATE_ALL_OBJECTS) \
	    -Wl,--whole-archive \
	    $(call normalize-target-libraries,$(PRIVATE_ALL_WHOLE_STATIC_LIBRARIES)) \
	    -Wl,--no-whole-archive \
	    $(if $(PRIVATE_GROUP_STATIC_LIBRARIES),-Wl$(comma)--start-group) \
	    $(call normalize-target-libraries,$(PRIVATE_ALL_STATIC_LIBRARIES)) \
	    $(if $(PRIVATE_GROUP_STATIC_LIBRARIES),-Wl$(comma)--end-group) \
	    $(if $(filter true,$(NATIVE_COVERAGE)),$(PRIVATE_TARGET_COVERAGE_LIB)) \
	    $(PRIVATE_TARGET_LIBATOMIC) \
	    $(PRIVATE_TARGET_LIBGCC) \
	    $(call normalize-target-libraries,$(PRIVATE_ALL_SHARED_LIBRARIES)) \
	    -o $@ \
	    $(PRIVATE_TARGET_GLOBAL_LDFLAGS) \
	    $(PRIVATE_LDFLAGS) \
	    $(PRIVATE_TARGET_CRTEND_SO_O) \
	    $(PRIVATE_LDLIBS)
	touch $(dir $@)export_includes

endif
